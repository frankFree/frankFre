<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[致不知道是谁的致歉信]]></title>
    <url>%2F2018%2F07%2F25%2Fstarter%2F</url>
    <content type="text"><![CDATA[关于博客初衷由于本人工作非常忙，这几年来整理的一些知识都是记录在有道云笔记上的，平时也经常看一些blog，有时候收获挺多的，所以也一直想把自己的一些认知分享给别人！我认为这是一种快乐！ 发展当时为了方便，就在github上随便找了一个blog采用的hexo next主题，那天就顺手clone下来，研究了一下，包括也穿件了自己的cloud账号啥的，花了大概不到一小时，自己也把hexo流程熟悉了一下，直接deploy到github pages上了，紧接着几天工作非常忙！忘记这茬子事了，也一直忘记了，也不是故意用那位谁的一些post，真的是失误！所以当即打算重新采用一款非常简洁的主题：maupassant 传送门 目标打算利用三个月的时间将大前端的知识全部系统的整理出来，到时还会有相关的实战项目，希望大家多多支持]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>感想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Closure（闭包）理解]]></title>
    <url>%2F2018%2F07%2F20%2Fclosure%2F</url>
    <content type="text"><![CDATA[closure闭包的定义闭包是由函数和与其相关的引用环境组合而成的实体closure = function + outer context function: usually created/returned by another functionouter context: variables this function relies onlexical scope: the variable that defined outside are automatically available inside you don’t hava to pass it inconsole.dir(function): 闭包的作用 可以读取函数内部的变量 让这些变量的值始终保存在内存中 examplesdemo 1:1234567891011var addTo = function(passed) &#123; var add = function(inner) &#123; return passed + inner &#125; return add&#125;console.dir(addTo(3))var addThree = new addTo(3)var addFour = new addTo(4)console.log(addThree(1)) // 4console.log(addFour(1)) // 5 demo 2:1234567891011let f;if (true) &#123; let i = 1; f = () =&gt; &#123; console.log(i) &#125;&#125;console.dir(f); // 查看闭包 查看下图// console.log(i); // 如果f没执行，就会报 i is not definedf(); demo 3:12345678910111213141516171819202122232425262728293031323334353637383940for(let i = 0; i &lt; 3; i++) &#123; setTimeout(() =&gt; &#123; console.log(i) &#125;, 1000)&#125;console.log('after the loop')// result // after the loop// 0// 1// 2for(var i = 0; i &lt; 3; i++) &#123; setTimeout(() =&gt; &#123; console.log(i) &#125;, 1000)&#125;console.log('after the loop')// result// after the loop// 3// 3// 3function varTest() &#123; var x = 1; if (true) &#123; var x = 2; // 同样的变量! console.log(x); // 2 &#125; console.log(x); // 2&#125;function letTest() &#123; let x = 1; if (true) &#123; let x = 2; // 不同的变量 console.log(x); // 2 &#125; console.log(x); // 1&#125; 更多与此demo相关案例 参考demo 4:12345678910111213function outer() &#123; var a = 1; aAdd = function() &#123; n += 1; &#125; var inner = function() &#123; console.log(a) &#125; return inner&#125;result() // 1aAdd() // undefinedresult() // 2 demo 5:12345678910111213141516171819202122232425function test(j) &#123; var i = 0; return function() &#123; alert("i:"+i+" ,j:"+j); alert(j + i++); &#125;&#125;; test(1)();//提示1test(1)();//还是提示1test(1)();//依然提示1经过改造一下：function test(j) &#123; var i = 0; return function() &#123; alert("i:"+i+" ,j:"+j); alert(j + i++); &#125;&#125;;var c = test(1);c();//提示1c();//提示2c();//提示3 使用闭包的注意点 会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Java Script</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.JS 入门]]></title>
    <url>%2F2018%2F07%2F18%2Fnode-js%2F</url>
    <content type="text"><![CDATA[请您稍后，待更新状态]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node.JS</tag>
      </tags>
  </entry>
</search>
